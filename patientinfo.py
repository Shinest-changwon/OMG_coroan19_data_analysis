# -*- coding: utf-8 -*-
"""patientinfo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LCMfwAoI1edOrZXZ_fsyMmYRz2SE6fFv
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.pylab as py

# Commented out IPython magic to ensure Python compatibility.
# 한글 폰트 불러오기

!apt -qq -y install fonts-nanum > /dev/null

import matplotlib.font_manager as fm

fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

font = fm.FontProperties(fname=fontpath, size=9)

fm._rebuild()

# 그래프에 retina display 적용

# %config InlineBackend.figure_format = 'retina'

# Colab 의 한글 폰트 설정

plt.rc('font', family='NanumBarunGothic')

patientinfo = pd.read_csv('./drive/My Drive/Colab Notebooks/Warmingup_Project/corona_visualization/PatientInfo.csv')
patientinfo

"""# 5. 지역별 신규 확진자가 많았던 날의 감염 원인
* 영남지방 신규 확진자 최대인 날짜 : 2020-02-29 , 최대 신규 확진자 수 : 763 명
* 호남지방 신규 확진자 최대인 날짜 : 2020-04-01 , 최대 신규 확진자 수 : 8 명
* 호서지방 신규 확진자 최대인 날짜 : 2020-02-28 , 최대 신규 확진자 수 : 28 명
* 수도권 신규 확진자 최대인 날짜:  2020-03-11 , 최대 신규 확진자 수 : 76 명
* 관동지방 신규 확진자 최대인 날짜:  2020-03-01 , 최대 신규 확진자 수 : 8 명
"""

# 각 지역별로 데이터 프레임 저장
youngnam_df =  patientinfo[(patientinfo['province'] == 'Busan') | (patientinfo['province'] == 'Daegu') | (patientinfo['province'] == 'Gyeongsangbuk-do') | 
                           (patientinfo['province'] == 'Gyeongsangnam-do') | (patientinfo['province'] == 'Ulsan')]

honam_df = patientinfo[(patientinfo['province'] == 'Gwangju') | (patientinfo['province'] == 'Jeollabuk-do') | (patientinfo['province'] == 'Jeollanam-do')]
hosae_df = patientinfo[(patientinfo['province'] == 'Chungcheongbuk-do') | (patientinfo['province'] == 'Chungcheongnam-do') | (patientinfo['province'] == 'Daejeon') | 
                       (patientinfo['province'] == 'Sejong')]                                                                                                               
sudo_df = patientinfo[(patientinfo['province'] == 'Gyeonggi-do') | (patientinfo['province'] == 'Incheon') | (patientinfo['province'] == 'Seoul')]
gandong_df = patientinfo[patientinfo['province'] == 'Gangwon-do']

youngnam_df

# 각 지역별 데이터 프레임을 신규 확진자가 많이 발생한 날짜의 최대 감염 원인 출력

# 영남 지방 감염 원인

# etc                                      319
# contact with patient                     219
# overseas inflow                           91
# Shincheonji Church                        78
# Onchun Church                             33
# Bonghwa Pureun Nursing Home               31
# Cheongdo Daenam Hospital                  21
# Gyeongsan Seorin Nursing Home             15
# Gyeongsan Jeil Silver Town                12
# Milal Shelter                             11
# Gyeongsan Cham Joeun Community Center     10
# Geochang Church                            6
# Changnyeong Coin Karaoke                   4
# Suyeong-gu Kindergarten                    3
# Itaewon Clubs                              2
# Pilgrimage to Israel                       2

# 영남지방 2020-02-29 최대 감염원인
print('영남 확진자 최대일: ',youngnam_df['confirmed_date'].value_counts().idxmax())   # 영남 확진자 최대일:  2020-03-05
print('영남 최대 확진자 :', youngnam_df['confirmed_date'].value_counts().max(),'명')  # 영남 최대 확진자 : 124 명
#

youngnam_df[youngnam_df['confirmed_date']=='2020-03-05']['infection_case'].value_counts()

print(honam_df['infection_case'].value_counts())
# hosae_cause = hosae_df
# sudo_caues = sudo_df
# gandong_cause = gandong_df

# 호남 지방 감염 원인

# overseas inflow         35
# contact with patient    18
# etc                     14
# Shincheonji Church       2
# Itaewon Clubs            1

# 호남지방 2020-04-01 최대 김염원인
# honam_df[honam_df['confirmed_date'] == '2020-04-01']['infection_case'].value_counts()
honam_df.groupby('confirmed_date').size()

# 호서 지방 감염 원인
# hosae_df['infection_case'].value_counts()
# contact with patient                131
# etc                                  57
# overseas inflow                      40
# gym facility in Cheonan              28
# Ministry of Oceans and Fisheries     27
# gym facility in Sejong                4
# Shincheonji Church                    2
# Itaewon Clubs                         1
# River of Grace Community Church       1

# 수도권 최대 감염 원인
sudo_df['infection_case'].value_counts()

# 관동 지방 최대 감염 원인
gandong_df['infection_case'].value_counts()

# 전체 감염 경로
patientinfo['infection_case'].unique() # 29개

# 'overseas inflow', 'contact with patient', 'Seongdong-gu APT',
# 'etc', "Eunpyeong St. Mary's Hospital", 'Shincheonji Church',
# 'Dongan Church', 'Guro-gu Call Center', nan, 'Itaewon Clubs',
# 'Samsung Medical Center', 'Coupang Logistics Center',
# 'Guri Collective Infection', 'KB Life Insurance',
# 'Yeongdeungpo Learning Institute', 'Onchun Church',
# 'Cheongdo Daenam Hospital', 'Suyeong-gu Kindergarten',
# 'Ministry of Oceans and Fisheries', 'gym facility in Cheonan',
# 'gym facility in Sejong', 'River of Grace Community Church',
# 'Gyeongsan Seorin Nursing Home',
# 'Gyeongsan Cham Joeun Community Center',
# 'Gyeongsan Jeil Silver Town', 'Bonghwa Pureun Nursing Home',
# 'Pilgrimage to Israel', 'Milal Shelter', 'Geochang Church',
# 'Changnyeong Coin Karaoke'

"""# 10. 연령대별 잉여 경로 비율"""

patientroute = pd.read_csv('./drive/My Drive/Colab Notebooks/Warmingup_Project/corona_visualization/PatientRoute.csv')
patientroute

# 전체 이동 장소 타입
patientroute['type'].unique() # 25개

# 'airport', 'hospital', 'etc', 'store', 'public_transportation',
# 'restaurant', 'church', 'beauty_salon', 'pharmacy', 'pc_cafe',
# 'bank', 'academy', 'cafe', 'bakery', 'bar', 'gym', 'school',
# 'real_estate_agency', 'karaoke', 'post_office', 'gas_station',
# 'park', 'lodging', 'university', 'administrative_area_level_1'

essential = ['hospital', 'pharmacy', 'store', 'public_transportation', 'gas_station', 'administrative_area_level_1', 'governmnet_office', 'post_office', 
             'primary_school', 'school', 'university']
non_essential = ['library', 'theater', 'cafe', 'bakery', 'beauty_salon',
          'pc_cafe', 'billiards','restaurant', 'bar', 'karaoke', 'airport', 'lodging', 'academy', 'gym', 'mountain', 'park', 'police_office', 'bank', 'real_estate_agency',
          'church', 'etc']

def isessential(x):     
    if x in essential: 
        res = True
    else:
        res = False 
    return res

patientroute['non_essential'] = patientroute['type'].apply(lambda x: isessential(x))

a = patientroute[['patient_id', 'type', 'non_essential']]
a.head()

patientroute['route_value'] = 1
b = pd.pivot_table(data=patientroute, index = 'patient_id', columns = 'non_essential', values= 'route_value', aggfunc='sum', fill_value=0) # aggfunc = sum: 합계 구하기, fill_value=0 : 결측치 0 처리
b

# Index로 있는 patient_id를 컬럼으로 빼내고 정리한다.
b.columns.name=None
b = b.reset_index()
b = b.rename(columns={False:'non_essential',True:'essential'})
b.head()

# 잉여 경로 비율 계산하기

b['surplus_ratio'] = b['non_essential'] / (b['non_essential'] + b['essential'])
b.head()

# PatientInfo와 b(PatientRoute 요약)을 Inner Join 해서 가로 방향으로 붙여서 df_joined를 만든다.
df_joined = patientinfo.merge(b, left_on = 'patient_id', right_on = 'patient_id' , how='inner')
df_joined.head()

# 연령대별 잉여 경로 비율 구하기 (평균)

print('00대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '0s']['surplus_ratio'].mean() * 100,'%')
print('10대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '10s']['surplus_ratio'].mean() * 100,'%')
print('20대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '20s']['surplus_ratio'].mean() * 100,'%')
print('30대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '30s']['surplus_ratio'].mean() * 100,'%')
print('40대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '40s']['surplus_ratio'].mean() * 100,'%')
print('50대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '50s']['surplus_ratio'].mean() * 100,'%')
print('60대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '60s']['surplus_ratio'].mean() * 100,'%')
print('70대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '70s']['surplus_ratio'].mean() * 100,'%')
print('80대의 잉여 경로 비율은: ', df_joined[df_joined['age'] == '80s']['surplus_ratio'].mean() * 100,'%')

"""# ----------------------------------------------------------------------------------------------------------

# 결론

## 9. 연령대별 누적 확진자 수, 누적 사망자 수 및 사망률

### 00대 확진자 수 / 사망자 수 / 사망률 : 157 / 0 / 0%
### 10대 확진자 수 / 사망자 수 / 사망률 : 655 / 0 / 0%
### 20대 확진자 수 / 사망자 수 / 사망률 : 3176 / 0 / 0%
### 30대 확진자 수 / 사망자 수 / 사망률 : 1292 / 2 / 0.15%
### 40대 확진자 수 / 사망자 수 / 사망률 : 1521 / 3 / 0.19%
### 50대 확진자 수 / 사망자 수 / 사망률 : 2039 / 15 / 0.74%
### 60대 확진자 수 / 사망자 수 / 사망률 : 1405 / 39 / 2.78%
### 70대 확진자 수 / 사망자 수 / 사망률 : 725 / 80 / 11.03%
### 80대 확진자 수 / 사망자 수 / 사망률 : 498 / 131 / 26.31%

## 10. 연령대별 잉여 경로 비율 = 비필수경로/전체경로(어떤 나이대가 더 많이 쓸데없는 곳을 많이 가는 지) 보여주기

### 1위: 20대(43.23%)
### 2위: 30대(40.59%)
### 3위: 50대(38.64%)
### 4위: 40대(38.34%)
### 5위: 60대(37.42%)
### 6위: 70대(33.99%)
### 7위: 10대(32.13%)
### 8위: 00대(26.37%)
### 9위: 80대(21.65%)
"""
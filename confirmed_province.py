# -*- coding: utf-8 -*-
"""confirmed_province.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ptFDtqyhS_BBFquveYXJpjpUrBj06kHM
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.pylab as py

"""아래 코드는 한글 폰트 실행하는 코드이며 실행 후 코랩에서는 '런타임 다시 시작' 후 다른 코드들을 실행해야 한다."""

# Commented out IPython magic to ensure Python compatibility.
# 한글 폰트 불러오기

!apt -qq -y install fonts-nanum > /dev/null

import matplotlib.font_manager as fm

fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

font = fm.FontProperties(fname=fontpath, size=9)

fm._rebuild()

# 그래프에 retina display 적용

# %config InlineBackend.figure_format = 'retina'

# Colab 의 한글 폰트 설정

plt.rc('font', family='NanumBarunGothic')

patientInfo = pd.read_csv('./drive/My Drive/Colab Notebooks/Warmingup_Project/corona_visualization/PatientInfo.csv')

patientInfo['infection_case'].unique()

# # 결측치 처리 - 'None' 문자열로 변경
# patientInfo = patientInfo.fillna('None')

# # 케이스 카테고리화
# church=['Onchun Church','Dongan Church','River of Grace Community Church','Geochang Church','Pilgrimage to Israel']
# nurshing=['Gyeongsan Seorin Nursing Home',"Eunpyeong St. Mary's Hospital",'Bonghwa Pureun Nursing Home','Milal Shelter','Suyeong-gu Kindergarten','Gyeongsan Jeil Silver Town','Cheongdo Daenam Hospital','Gyeongsan Cham Joeun Community Center']
# gym=['gym facility in Sejong','gym facility in Cheonan']
# etc=['Changnyeong Coin Karaoke','Seongdong-gu APT', 'etc']
# work = ['Guro-gu Call Center','Ministry of Oceans and Fisheries']
# shincheonji = ['Shincheonji Church', 'None']

# category_name = ['Church related','Nurshing related', 'Gym related', 'ETC', 'Workplace related', 'Shincheonji Church']
# for i,category in enumerate([church, nurshing, gym, etc, work, shincheonji]):
#     # enumerate = { 0 : church, 1 : nurshing, 2 : gym, 3 : etc, 4 : work, 5 : shincheonji }
#     # category = [ church, nurshing, gym, etc, work, shincheonji ]
#     patientInfo.infection_case = patientInfo.infection_case.replace(category, category_name[i])
#     # infection_case의 열에 있는 값을 ['Church related','Nurshing related', 'Gym related', 'ETC', 'Workplace related', 'Shincheonji Church'] 으로 바꾸겠다.

# patientInfo.iloc[24:26, 7:10] # 24번 데이터는 Eunpyeong St. Mary's Hospital -> Nurshing related 변화, 25번 데이터는 etc -> ETC 변화

# 지역별로 분류해서 그래프 만들기
# sub_title=["수도권 지역", "영남 지역", "호남 지역"]
# fig = make_subplots(rows=1, cols=3,
#                     specs=[[{'type':'domain'},{'type':'domain'}]],
#                    subplot_titles=([f'>' for prov in sub_title]))
# # 재 작성 필요

"""# 지역별 확진자 수 증가 양상"""

timeProvince = pd.read_csv('./drive/My Drive/Colab Notebooks/Warmingup_Project/corona_visualization/TimeProvince.csv')
timeProvince

timeProvince['province'].unique() # province의 모든 값

# province와 date 기준으로 정렬
sort = timeProvince.sort_values(by=['province', 'date'] ,ascending=[False, True])
sort

# 피벗테이블 생성 / 행 = 날짜, 열 = 지역, 값 = 확진자 수 / 지역별 확진자 수 증가 파악 가능

confirmed = pd.pivot_table(timeProvince, index='date',columns='province', values='confirmed') # 행 = 날짜, 열 = 지역, 값 = 확진자 수 / 지역별 확진자 수 증가 파악 가능
confirmed.head(10)
# confirmed.iloc[:, 15:16] # 서울 데이터

# 지역별로 분류해 날짜순으로 확진자 수가 얼마나 증가하는 지 확인할 수 있다.

youngnam = ['Busan', 'Daegu', 'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Ulsan']
honam = ['Gwangju', 'Jeollabuk-do', 'Jeollanam-do']
hosae = ['Chungcheongbuk-do', 'Chungcheongnam-do', 'Daejeon', 'Sejong']
sudo = ['Gyeonggi-do', 'Incheon', 'Seoul']
gandong = ['Gangwon-do']

confirmed['youngnam'] = confirmed[youngnam].sum(axis=1)
confirmed['honam'] = confirmed[honam].sum(axis=1)
confirmed['hosae'] = confirmed[hosae].sum(axis=1)
confirmed['sudo'] = confirmed[sudo].sum(axis=1)
confirmed['gandong'] = confirmed[gandong].sum(axis=1)

confirmed.iloc[:,17:23]

"""# 지역별 누적 확진자 수 증가 양상"""

# 지역별 누적 확진자 수 증가 양상

ax = confirmed.plot(kind='line', y='youngnam', color='red', label='영남지방')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('인원 수', fontsize=20)

# plt.title("지역별 누적 확진자 수 증가 양상")

# plt.plot(confirmed.index, confirmed['youngnam'], label='youngnam')
# plt.plot(confirmed.index, confirmed['honam'], label='honam')
# plt.plot(confirmed.index, confirmed['hosae'], label='hosae')
# plt.plot(confirmed.index, confirmed['sudo'], label='sudo')
# plt.plot(confirmed.index, confirmed['gandong'], label='gandong')
# plt.legend(loc=2)
# plt.xlabel('date', fontsize=20)
# plt.ylabel('num_patient', fontsize=20)
# plt.xticks(rotation=90)
# plt.legend(loc=2, fontsize=15)
# plt.xlabel('date')
# plt.ylabel('num_patient')
# py.rcParams["figure.figsize"] = 40, 4
plt.tight_layout()
plt.show()

"""# 지역별 신규 확진자 수 증가 양상"""

# 지역별 신규 확진자 수 리스트 생성

youngnam_new_list, honam_new_list, hosae_new_list, sudo_new_list, gandong_new_list = list(), list(), list(), list(), list()
for i in range(len(confirmed['youngnam'])):
    if i == 0:
        youngnam_new_list.append(confirmed['youngnam'][0])
    else:
        j = confirmed['youngnam'][i] - confirmed['youngnam'][i-1]
        youngnam_new_list.append(j)

for i in range(len(confirmed['honam'])):
    if i == 0:
        honam_new_list.append(confirmed['honam'][0])
    else:
        j = confirmed['honam'][i] - confirmed['honam'][i-1]
        honam_new_list.append(j)

for i in range(len(confirmed['hosae'])):
    if i == 0:
       hosae_new_list.append(confirmed['hosae'][0])
    else:
        j = confirmed['hosae'][i] - confirmed['hosae'][i-1]
        hosae_new_list.append(j)


for i in range(len(confirmed['sudo'])):
    if i == 0:
        sudo_new_list.append(confirmed['sudo'][0])
    else:
        j = confirmed['sudo'][i] - confirmed['sudo'][i-1]
        sudo_new_list.append(j)

for i in range(len(confirmed['gandong'])):
    if i == 0:
        gandong_new_list.append(confirmed['gandong'][0])
    else:
        j = confirmed['gandong'][i] - confirmed['gandong'][i-1]
        gandong_new_list.append(j)

# 신규 확진자 수 colunms 추가

confirmed['youngnam_new'] = youngnam_new_list
confirmed['honam_new'] = honam_new_list
confirmed['hosae_new'] = hosae_new_list
confirmed['sudo_new'] = sudo_new_list
confirmed['gandong_new'] = gandong_new_list

confirmed.iloc[:, 22:29]

"""# 4. 지역별 신규 확진자 최대치인 날짜 구하기"""

max_new_confirmed_date_youngnam = confirmed['youngnam_new'].idxmax()
max_new_confirmed_num_youngnam = confirmed['youngnam_new'].max()
max_new_confirmed_date_honam = confirmed['honam_new'].idxmax()
max_new_confirmed_num_honam = confirmed['honam_new'].max()
max_new_confirmed_date_hosae = confirmed['hosae_new'].idxmax()
max_new_confirmed_num_hosae = confirmed['hosae_new'].max()
max_new_confirmed_date_sudo = confirmed['sudo_new'].idxmax()
max_new_confirmed_num_sudo = confirmed['sudo_new'].max()
max_new_confirmed_date_gandong = confirmed['gandong_new'].idxmax()
max_new_confirmed_num_gandong = confirmed['gandong_new'].max()

print('영남지방 신규 확진자 최대인 날짜 :', max_new_confirmed_date_youngnam, ', 최대 신규 확진자 수 :',max_new_confirmed_num_youngnam, '명')
print('호남지방 신규 확진자 최대인 날짜 :', max_new_confirmed_date_honam, ', 최대 신규 확진자 수 :',max_new_confirmed_num_honam,'명')
print('호서지방 신규 확진자 최대인 날짜 :', max_new_confirmed_date_hosae, ', 최대 신규 확진자 수 :',max_new_confirmed_num_hosae,'명')
print('수도권 신규 확진자 최대인 날짜: ', max_new_confirmed_date_sudo, ', 최대 신규 확진자 수 :',max_new_confirmed_num_sudo,'명')
print('관동지방 신규 확진자 최대인 날짜: ', max_new_confirmed_date_gandong,', 최대 신규 확진자 수 :',max_new_confirmed_num_gandong,'명')

confirmed.columns.name=None
confirmed = confirmed.reset_index()
confirmed.head()

len(confirmed.index)

for i in range(len(confirmed.index)):
    if confirmed['date'][i][8:10] == '21' or confirmed['date'][i][8:10] == '22' or confirmed['date'][i][8:10] == '23' or confirmed['date'][i][8:10] == '24' or confirmed['date'][i][8:10] == '25' or confirmed['date'][i][8:10] == '26' or confirmed['date'][i][8:10] == '27' or confirmed['date'][i][8:10] == '28' or confirmed['date'][i][8:10] == '30' or confirmed['date'][i][8:10] == '31' or confirmed['date'][i][8:10] == '02' or confirmed['date'][i][8:10] == '03' or confirmed['date'][i][8:10] == '04' or confirmed['date'][i][8:10] == '05' or confirmed['date'][i][8:10] == '06' or confirmed['date'][i][8:10] == '07' or confirmed['date'][i][8:10] == '08' or confirmed['date'][i][8:10] == '09' or confirmed['date'][i][8:10] == '10' or confirmed['date'][i][8:10] == '11' or confirmed['date'][i][8:10] == '12' or confirmed['date'][i][8:10] == '13' or confirmed['date'][i][8:10] == '14' or confirmed['date'][i][8:10] == '15' or confirmed['date'][i][8:10] == '16' or confirmed['date'][i][8:10] == '17' or confirmed['date'][i][8:10] == '18' or confirmed['date'][i][8:10] == '19' or confirmed['date'][i][8:10] == '20':
        confirmed['date'] = confirmed['date'].replace([confirmed['date'][i]], '')

confirmed['date'] = confirmed['date'].replace(['2020-01-29', '2020-03-01', '2020-04-01', '2020-05-01'], '')
confirmed['date'] = confirmed['date'].replace(['2020-02-01'], 'Feb 1')
confirmed['date'] = confirmed['date'].replace(['2020-02-29'], 'Feb 29')
confirmed['date'] = confirmed['date'].replace(['2020-03-29'], 'Mar 29')
confirmed['date'] = confirmed['date'].replace(['2020-04-29'], 'Apr 29')
confirmed['date'] = confirmed['date'].replace(['2020-05-29'], 'May 29')
confirmed.head(5)

"""# 수도권 신규 확진자 및 누적 확진자 수 증가 양상"""

# 수도권 신규 확진자 및 누적 확진자 수 증가 양상 피벗 테이블 시각화
ax = confirmed.plot(kind='bar', x='date', y='sudo_new',  color='Red',  fontsize=20, label='신규 확진자')
ax2 = confirmed.plot(kind='line', x='date', y='sudo', color='DarkBlue',figsize=(30,5), secondary_y=True, fontsize=20, ax=ax, label='누적 확진자')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('신규 확진자', fontsize=20)
ax2.set_ylabel('누적 확진자', fontsize=20)
plt.title('수도권 신규 확진자 및 누적 확진자 수 증가 양상', fontsize=30)
plt.tight_layout()
# plt.legend(handles=(ax2,ax), labels=('a','b'))
plt.rc('legend', fontsize=15)
plt.show()

"""# 영남지방 신규 확진자 및 누적 확진자 수 증가 양상"""

# 영남지방 신규 확진자 및 누적 확진자 수 증가 양상 피벗 테이블 시각화
ax = confirmed.plot(kind='bar',x='date', y='youngnam_new', color='Red', figsize=(30,5), fontsize=20, label='신규 확진자')
ax2 = confirmed.plot(kind='line',x='date', y='youngnam', secondary_y=True, color='DarkBlue', fontsize=20, ax=ax, label='누적 확진자')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('신규 확진자', fontsize=20)
ax2.set_ylabel('누적 확진자', fontsize=20)
plt.title('영남지방 신규 확진자 및 누적 확진자 수 증가 양상', fontsize=30)
plt.tight_layout()
ax.legend(loc='upper left', fancybox=True, shadow=True)
ax2.legend(loc='center left')
plt.show()

"""# 호남지방 신규 확진자 및 누적 확진자 수 증가 양상"""

# 호남지방 신규 확진자 및 누적 확진자 수 증가 양상 피벗 테이블 시각화
ax = confirmed.plot(kind='bar', x='date', y='honam_new',  color='Red', fontsize=20,figsize=(30,5), label='신규 확진자')
ax2 = confirmed.plot(kind='line', x='date', y='honam', color='DarkBlue',secondary_y=True,ax=ax, fontsize=20, label='누적 확진자')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('신규 확진자', fontsize=20)
ax2.set_ylabel('누적 확진자', fontsize=20)
plt.title('호남지방 신규 확진자 및 누적 확진자 수 증가 양상', fontsize=30)
plt.tight_layout()
plt.show()

"""# 호서지방 신규 확진자 및 누적 확진자 수 증가 양상"""

# 호서지방 신규 확진자 및 누적 확진자 수 증가 양상 피벗 테이블 시각화
ax = confirmed.plot(kind='bar', x='date', y='hosae_new', color='Red',figsize=(30,5), fontsize=20, label='신규 확진자')
ax2 = confirmed.plot(kind='line', x='date', y='hosae', color='DarkBlue',secondary_y=True, ax=ax, fontsize=20, label='누적 확진자')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('신규 확진자', fontsize=20)
ax2.set_ylabel('누적 확진자', fontsize=20)
plt.title('호서지방 신규 확진자 및 누적 확진자 수 증가 양상', fontsize=30)
plt.tight_layout()
plt.show()

"""# 관동지방 신규 확진자 및 누적 확진자 수 증가 양상"""

# 관동지방 신규 확진자 및 누적 확진자 수 증가 양상 피벗 테이블 시각화
ax = confirmed.plot(kind='bar', x='date', y='gandong_new', color='Red', figsize=(30,5), fontsize=20, label='신규 확진자')
ax2 = confirmed.plot(kind='line', x='date', y='gandong', color='DarkBlue', secondary_y=True, ax=ax, fontsize=20, label='누적 확진자')

ax.set_xlabel('날짜', fontsize=20)
ax.set_ylabel('신규 확진자', fontsize=20)
ax2.set_ylabel('누적 확진자', fontsize=20)
plt.title('관동지방 신규 확진자 및 누적 확진자 수 증가 양상', fontsize=30)
plt.tight_layout()
plt.show()